// 웹 서버 만들어보자 

    // http 내장 모듈 가져오기
    const http = require("http")
        // 서버에 대한 내용을 객체로 만들어주고, 
        // 객체 안에 있는 메소드를 사용해서, 
        // '듣고 있을 수 있게' 만든다. 

    // createServer 메소드는 서버 객체를 만들어주고, 
    // 클라이언트에서 요청을 받으면 호출이 된다. 
    // 전달된 콜백 함수는 클라이언트의 요청을 받아서, 
    // 처리 후, 
    // 클라이언트에게 응답을 해준다. 


    const server = http.createServer((req, res) => {
        // 위에서 처리를 다 하고, > 응답 end 메소드, 해당 내용을 응답 한 후 > 종료
        
        // 문자열이 왜 다 깨질까. 
            // 인코딩 방식을 다 정해줘야 함.
        res.setHeader();

        res.end("server on")

        // 즉, 요청을 듣고 있다가, 들리면 > server on 응답 해줌. 

    });



// 포트
    // 3000번 포트 같이, 포트를 지정하는 이유는? 
    // 네트워크 상 프로세스 ⭐나눠주기 위해서⭐ 포트를 지정
    // http 는 80번 포트 사용 | https 433 포트 
    // 사용하지 않을 것 같은 포트는? 
        // 시스템 예약 포트 이외의 포트 
        // 1024 까지 사용하니까, 1025 부터 65535 까지 
        // 보통 8000, 8080, 3000 이런 포트를 많이 사용함



const PORT = 4000;
    // 여기까지 실행하면 > 실행하고 > 꺼짐 
    // 왜냐면, ⭐ 내용이 없으니까 ⭐ 
    // so, 서버가 동작하고 있게 하려면? 
        // listen 하게 해줘야 

server.listen(PORT, () => {
    // 콜백함수를 등록해서 > 성공적으로 서버가 열렸는지 확인이 가능 '⭐⭐ 
    console.log("서버가 잘 열렸는지 확인~~~ "+PORT + "에")
})
    // 이걸 듣고 있는 걸로 해줘서 > 클라이언트의 요청을 대기 한다 라고 할 수 있다 
    // ⭐이벤트 루프를 돌면서, ⭐대기하고 있다가 > 클라이언트의 요청이 ⭐오면 > ⭐응답

    // listen 의 첫 번째 매개변수 : port 를 전달 

